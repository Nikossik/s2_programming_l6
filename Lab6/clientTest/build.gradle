plugins {
    id 'application'
    id 'java-library'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.0'
    id 'org.openjfx.javafxplugin' version "0.0.10"
    id 'io.freefair.lombok' version '6.5.1'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.4'
    implementation 'jakarta.activation:jakarta.activation-api:2.1.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.5'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8'
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
}

test {
    useJUnitPlatform()
}

tasks.register('testing') {
    doLast {
        println 'Running tests...'
    }
}

tasks.register('application') {
    mainClassName = 'ru.itmo.lab5.system.Main'
}

def os = org.gradle.internal.os.OperatingSystem.current()
def arch = System.getProperty("os.arch")
def javafxPlatform = os.isMacOsX() && arch.contains("aarch64") ? "mac-aarch64" : os.isWindows() ? "win" : os.isLinux() ? "linux" : os.isMacOsX() ? "mac" : ""

dependencies {
    implementation "org.openjfx:javafx-base:20:${javafxPlatform}"
    implementation "org.openjfx:javafx-controls:20:${javafxPlatform}"
    implementation "org.openjfx:javafx-fxml:20:${javafxPlatform}"
    implementation "org.openjfx:javafx-graphics:20:${javafxPlatform}"
}

run {
    main = 'ru.itmo.lab5.system.Main'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

shadowJar {
    archiveBaseName.set('Jar/Lab6')
    configurations = [project.configurations.compileClasspath]
    manifest {
        attributes 'Main-Class': 'ru.itmo.lab5.system.Main'
    }
}

tasks.register('ShadowJar') {
    // Set main class name here if needed
}

javafx {
    version = '22.0.1'
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/java/ru/itmo/lab5/resources']
        }
    }
}